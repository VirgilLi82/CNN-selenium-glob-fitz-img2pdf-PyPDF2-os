产生一个读取了读取文件结果的array，所有读取文件用的filereader装在array里
（此为执行读取，只有按下回车才算一个线程执行完成，
所以需要指定一个新对象也就是变量承接，即直接在函数中指定array操作无效读取）
function createfilearr(files){
    var abb=[]
    for(var i=0;i<files.length;i++){
        var file=new FileReader()
        abb.push(file)}
    for ( var n in abb){
        abb[n].readAsText(files[n])}
    return abb}

tenarr=[]
for (var i=0;i<10;i++){
    put=document.getElementById(String(i))
    jieguo=createfilearr(put.files)
    tenarr.push(jieguo)}

从读取文件结果的装满filereader的array实例，上文的jieguo（作为函数的参数readobject），
变为产生关于同一个output（数字1，2等的）数组方法：
function crearetensor(readobject,numoftennsorsize){
    var shuzu=[]
    for (var g=0;g<readobject.length;g++){
        shuzu.push(readobject[g].onload=creareArray(numoftennsorsize,readobject[g].result))}
    return shuzu
}

xinarr=[]
for (var a=0;a<tenarr.length;a++){
    xinarr.push(crearetensor(tenarr[a],25))
    }
#生成含批次量的tensor方法[1,25,25]#
*可将crearetensor和上述混合来写函数。

适用所有位数数字的方法（把字符结果变为JS数字的方法，有了JS数字才能变为tensor，number即为想建立array的size）
function creareArray(number,jieguo){
    var arr=[] 
    var ray=[]
    var newres=jieguo.split(',')
for(var i=0;i<=newres.length;i++){
    var num=Number(newres[i])
    arr.push([num])//num在push之前可以加上数字运算
    if(arr.length==number){
        ray.push(arr)
        arr=[]}}
    return tf.tensor([ray])}//这里可以改变批次数目，通过加[]


产生input方法
function creareinput(num,Jspath){
    for (var i=0;i<num;i++){
        var put=document.createElement('input')
        put.type='file'
        put.id=String(i)
	put.accept='.txt'
	put.multiple=true
        Jspath.append(put)}}



var model=tf.sequential()
model.add(tf.layers.conv2d({inputShape:[25,25,1],kernelSize:1,filters:2,strides:1,activation:'relu',kernelInitializer:'VarianceScaling'}))
model.add(tf.layers.maxPool2d({kernelsize:[2,2],strides:1}))
model.add(tf.layers.conv2d({kernelSize:[2,2],filters:5,strides:2,activation:'softmax',kernelInitializer:'VarianceScaling'}))
model.add(tf.layers.flatten())
model.add(tf.layers.dense({units:10,activation:'softmax'}))//一定要在最后一层体现使用的激活函数，不体现只会出现正态分布的两个极值

var optimizer=tf.train.adam(0.0005)

model.compile({optimizer:optimizer,loss:'categoricalCrossentropy',metrics:['accuracy']})

#产生output结果的数组模式，每一个label含有的batchsize都能设定
function creareresultarr(numberoflabel,batchsize){
    var finalarr=[]
    var newresultarr=[]
    for (var g=0;g<numberoflabel;g++){
        var myarr=Array(numberoflabel)
        myarr.fill(0)
        myarr[g]=1
        for (var x=0;x<batchsize;x++){
            finalarr.push(myarr)}
        newresultarr.push(tf.tensor(finalarr))
        finalarr=[]}
    return newresultarr}

训练
c=creareresultarr(10,1)
q=0
while(q<1000){
    var p=0
    var num1=Math.round(Math.random()*9)
    while(p<10){
        var num2=Math.round(Math.random()*9)
        const his=await model.fit(xinarr[num1][num2],c[num1])
        console.log(String(num1))
        console.log(String(num2))
        console.log(his.history.loss)
        p=p+1}
    p=0
    q=q+1}